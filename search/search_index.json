{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5199\u5728\u524d\u9762\u7684\u8bdd \u4f5c\u4e3a\u4e00\u540d\u5927\u4e09\u5b66\u751f\uff0c\u6211\u5c1d\u8bd5\u5199\u4e0b\u8fd9\u4efd\u6587\u6863\uff0c\u4e00\u65b9\u9762\u662f\u7ed9\u6700\u8fd1\u8fd9\u6bb5\u6e38\u620f\u5f15\u64ce\u5b66\u4e60\u7ecf\u5386\u4e00\u4e2a\u603b\u7ed3\uff0c\u540c\u65f6\u8fd9\u4e5f\u5c06\u6210\u4e3a\u6211\u6bd5\u8bbe\u7684\u4e00\u90e8\u5206\uff1b\u53e6\u4e00\u65b9\u9762\u662f\u60f3\u7ed9\u540e\u6765\u8005\u6307\u4e00\u6307\u5927\u6982\u7684\u65b9\u5411\u3002 \u5e0c\u671b\u80fd\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u70ed\u7231\u6e38\u620f\u5f15\u64ce\uff0c\u4e86\u89e3\u5b83\uff0c\u7136\u540e\u4f18\u5316\u5b83\uff0c\u4e89\u53d6\u65e9\u65e5\u5b9e\u73b0\u300a\u9ed1\u5ba2\u5e1d\u56fd\u300b\u4e2d\u7684\u573a\u666f\u3002 \u82f1\u6587\u7248 \u7684\u4f1a\u968f\u7740\u8be5\u6587\u6863\u7f13\u6162\u66f4\u65b0\u3002 \u5982\u679c\u4f60\u5728\u9605\u8bfb\u671f\u95f4\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u5728\u8be5\u9879\u76ee\u7684 Github \u5730\u5740 \u63d0\u4ea4 issue \u6216\u8005\u5411 2481814748@qq.com \u53d1\u9001\u90ae\u4ef6\uff0c\u6211\u5c06\u4f1a\u975e\u5e38\u611f\u8c22\u60a8\u63d0\u4f9b\u7684\u5b9d\u8d35\u610f\u89c1\u3002 \u6b22\u8fce\u6765\u5230\u6e38\u620f\u5f15\u64ce\u7684\u4e16\u754c \u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60 \u6e38\u620f\u5f15\u64ce\u662f\u6e38\u620f\u7687\u51a0\u4e0a\u7480\u74a8\u7684\u660e\u73e0\u3002 \u6e38\u620f\u5f15\u64ce\u7684\u5f00\u53d1\u6d89\u53ca\u5230\u4e86\u5404\u884c\u5404\u4e1a\u7684\u77e5\u8bc6\uff0c\u5373\u4f7f\u4f60\u4ee5\u540e\u4e0d\u4ece\u4e8b\u76f8\u5173\u5de5\u4f5c\uff0c\u5b83\u4e5f\u4f9d\u7136\u6709\u5b66\u4e60\u4ef7\u503c\u3002 \u900f\u8fc7\u5b83\uff0c\u4f60\u5c06\u4e86\u89e3\u5230\u4eba\u7c7b\u5982\u4f55\u5c06\u6211\u4eec\u6240\u5904\u7684\u8fd9\u4e2a\u4e16\u754c\u538b\u7f29\u8fdb\u5f15\u64ce\u4e2d\u3002 \u8fd9\u91cc\u6709\u4ec0\u4e48 \u6211\u5c06\u501f\u52a9 GAMES104 \u548c\u4e00\u4e9b\u5176\u4ed6\u8d44\u6599\uff0c\u4e3a\u4f60\u63d0\u4f9b\u8db3\u591f\u4e30\u5bcc\u7684\u7406\u8bba\u77e5\u8bc6\u3002 \u540c\u65f6\u9644\u4e0a\u6211\u5b66\u4e60 Cherno \u7684\u8bfe\u7a0b \u540e\u5f00\u53d1\u7684 VitarEngine \u7684\u4ee3\u7801\uff0c\u4e5f\u8bf7\u4f60\u4eec\u652f\u6301 HazelEngine \u3002","title":"\u5bb6"},{"location":"#_1","text":"\u4f5c\u4e3a\u4e00\u540d\u5927\u4e09\u5b66\u751f\uff0c\u6211\u5c1d\u8bd5\u5199\u4e0b\u8fd9\u4efd\u6587\u6863\uff0c\u4e00\u65b9\u9762\u662f\u7ed9\u6700\u8fd1\u8fd9\u6bb5\u6e38\u620f\u5f15\u64ce\u5b66\u4e60\u7ecf\u5386\u4e00\u4e2a\u603b\u7ed3\uff0c\u540c\u65f6\u8fd9\u4e5f\u5c06\u6210\u4e3a\u6211\u6bd5\u8bbe\u7684\u4e00\u90e8\u5206\uff1b\u53e6\u4e00\u65b9\u9762\u662f\u60f3\u7ed9\u540e\u6765\u8005\u6307\u4e00\u6307\u5927\u6982\u7684\u65b9\u5411\u3002 \u5e0c\u671b\u80fd\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u70ed\u7231\u6e38\u620f\u5f15\u64ce\uff0c\u4e86\u89e3\u5b83\uff0c\u7136\u540e\u4f18\u5316\u5b83\uff0c\u4e89\u53d6\u65e9\u65e5\u5b9e\u73b0\u300a\u9ed1\u5ba2\u5e1d\u56fd\u300b\u4e2d\u7684\u573a\u666f\u3002 \u82f1\u6587\u7248 \u7684\u4f1a\u968f\u7740\u8be5\u6587\u6863\u7f13\u6162\u66f4\u65b0\u3002 \u5982\u679c\u4f60\u5728\u9605\u8bfb\u671f\u95f4\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u5728\u8be5\u9879\u76ee\u7684 Github \u5730\u5740 \u63d0\u4ea4 issue \u6216\u8005\u5411 2481814748@qq.com \u53d1\u9001\u90ae\u4ef6\uff0c\u6211\u5c06\u4f1a\u975e\u5e38\u611f\u8c22\u60a8\u63d0\u4f9b\u7684\u5b9d\u8d35\u610f\u89c1\u3002","title":"\u5199\u5728\u524d\u9762\u7684\u8bdd"},{"location":"#_2","text":"","title":"\u6b22\u8fce\u6765\u5230\u6e38\u620f\u5f15\u64ce\u7684\u4e16\u754c"},{"location":"#_3","text":"\u6e38\u620f\u5f15\u64ce\u662f\u6e38\u620f\u7687\u51a0\u4e0a\u7480\u74a8\u7684\u660e\u73e0\u3002 \u6e38\u620f\u5f15\u64ce\u7684\u5f00\u53d1\u6d89\u53ca\u5230\u4e86\u5404\u884c\u5404\u4e1a\u7684\u77e5\u8bc6\uff0c\u5373\u4f7f\u4f60\u4ee5\u540e\u4e0d\u4ece\u4e8b\u76f8\u5173\u5de5\u4f5c\uff0c\u5b83\u4e5f\u4f9d\u7136\u6709\u5b66\u4e60\u4ef7\u503c\u3002 \u900f\u8fc7\u5b83\uff0c\u4f60\u5c06\u4e86\u89e3\u5230\u4eba\u7c7b\u5982\u4f55\u5c06\u6211\u4eec\u6240\u5904\u7684\u8fd9\u4e2a\u4e16\u754c\u538b\u7f29\u8fdb\u5f15\u64ce\u4e2d\u3002","title":"\u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60"},{"location":"#_4","text":"\u6211\u5c06\u501f\u52a9 GAMES104 \u548c\u4e00\u4e9b\u5176\u4ed6\u8d44\u6599\uff0c\u4e3a\u4f60\u63d0\u4f9b\u8db3\u591f\u4e30\u5bcc\u7684\u7406\u8bba\u77e5\u8bc6\u3002 \u540c\u65f6\u9644\u4e0a\u6211\u5b66\u4e60 Cherno \u7684\u8bfe\u7a0b \u540e\u5f00\u53d1\u7684 VitarEngine \u7684\u4ee3\u7801\uff0c\u4e5f\u8bf7\u4f60\u4eec\u652f\u6301 HazelEngine \u3002","title":"\u8fd9\u91cc\u6709\u4ec0\u4e48"},{"location":"EventSystem/","text":"\u7ed3\u6784 \u56fe\u3002 Event EventType \u548c EventCategory \uff1a\u5bf9\u5404\u79cd\u4e8b\u4ef6\u8fdb\u884c\u5206\u7c7b\u3002 enum class EventType { None = 0, WindowClose, WindowResize, WindowFocus, WindowLostFocus, WindowMoved, AppTick, AppUpdate, AppRender, KeyPressed, KeyReleased, MouseButtonPressed, MouseButtonReleased, MouseMoved, MouseScrolled }; enum EventCategory { None = 0, EventCategoryApplication = BIT(0), EventCategoryInput = BIT(1), EventCategoryKeyboard = BIT(2), EventCategoryMouse = BIT(3), EventCategoryMouseButton = BIT(4) }; Event \uff1a\u4f5c\u4e3a\u57fa\u7c7b\uff0c\u5f15\u5165\u4e8b\u4ef6\u8c03\u5ea6\uff0c\u8bbe\u7f6e\u5e03\u5c14\u53d8\u91cf\u50a8\u5b58\u8be5\u4e8b\u4ef6\u662f\u5426\u5df2\u88ab\u5904\u7406\u3002 class HAZEL_API Event { friend class EventDispatcher; public: virtual EventType GetEventType() const = 0; virtual const char* GetName() const = 0; virtual int GetCategoryFlags() const = 0; virtual std::string ToString() const { return GetName(); } inline bool IsInCategory(EventCategory category) { return GetCategoryFlags() & category; } protected: bool m_Handled = false; }; \u5c06 m_Handled \u8bbe\u4e3a protected \u578b\uff0c\u662f\u4e3a\u4e86\u4fdd\u8bc1\u5b50\u7c7b\u53ef\u4ee5\u76f4\u63a5\u8bbe\u7f6e\u548c\u8c03\u7528\u8be5\u5c5e\u6027\u3002 \u901a\u8fc7\u5bf9 Event \u7684\u91cd\u8f7d\u548c\u5f02\u5316\uff0c\u5373\u53ef\u5b9e\u73b0\u4e0d\u540c\u7684\u4e8b\u4ef6\u3002 EventDispatcher \uff1a\u7528\u6765\u8bbe\u7f6e\u4e8b\u4ef6\u662f\u5426\u5df2\u88ab\u5904\u7406\u3002 class EventDispatcher { template<typename T> using EventFn = std::function<bool(T&)>; public: EventDispatcher(Event& event) : m_Event(event) { } template<typename T> bool Dispatch(EventFn<T> func) { if (m_Event.GetEventType() == T::GetStaticType()) { m_Event.m_Handled = func(*(T*)&m_Event); return true; } return false; } private: Event& m_Event; }; Window WindowProps \uff1a\u50a8\u5b58 Window \u7684\u57fa\u7840\u5c5e\u6027\u3002 struct WindowProps { std::string Title; unsigned int Width; unsigned int Height; WindowProps(const std::string& title = \"Hazel Engine\", unsigned int width = 1280, unsigned int height = 720) : Title(title), Width(width), Height(height) { } }; Window \uff1a\u4f5c\u4e3a\u57fa\u7c7b\uff0c\u9884\u8bbe\u4e86\u4e8b\u4ef6\u51fd\u6570\u7684\u6a21\u677f\u4ee5\u53ca\u89c4\u8303\u4e86\u7a97\u53e3\u521b\u5efa\u51fd\u6570\u3002 class HAZEL_API Window { public: using EventCallbackFn = std::function<void(Event&)>; virtual ~Window() {} virtual void OnUpdate() = 0; virtual unsigned int GetWidth() const = 0; virtual unsigned int GetHeight() const = 0; // Window attributes virtual void SetEventCallback(const EventCallbackFn& callback) = 0; virtual void SetVSync(bool enabled) = 0; virtual bool IsVSync() const = 0; static Window* Create(const WindowProps& props = WindowProps()); }; WindowsWindow \uff1a\u91cd\u5199\u5e76\u5b9e\u73b0 Window \u7c7b\uff0c\u589e\u6dfb\u4e86 WindowData \u4ee5\u50a8\u5b58\u4ece\u521b\u5efa\u51fd\u6570\u4f20\u6765\u7684\u6570\u636e\u548c\u5f53\u524d\u7684\u56de\u8c03\u51fd\u6570\u4ee5\u53ca\u5bf9 VSync \u7684\u8bbe\u7f6e\u3002 class WindowsWindow : public Window { public: WindowsWindow(const WindowProps& props); virtual ~WindowsWindow(); void OnUpdate() override; inline unsigned int GetWidth() const override { return m_Data.Width; } inline unsigned int GetHeight() const override { return m_Data.Height; } // Window attributes inline void SetEventCallback(const EventCallbackFn& callback) override { m_Data.EventCallback = callback; } void SetVSync(bool enabled) override; bool IsVSync() const override; private: virtual void Init(const WindowProps& props); virtual void Shutdown(); private: GLFWwindow* m_Window; struct WindowData { std::string Title; unsigned int Width, Height; bool VSync; EventCallbackFn EventCallback; }; WindowData m_Data; }; \u5176\u4e2d GLFW \u4e0b\u7684\u56de\u8c03\u51fd\u6570\u5b9e\u73b0 \u5927\u81f4\u5982\u4e0b\u3002 // Set GLFW callbacks glfwSetWindowSizeCallback(m_Window, [](GLFWwindow* window, int width, int height) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); data.Width = width; data.Height = height; WindowResizeEvent event(width, height); data.EventCallback(event); }); glfwSetWindowCloseCallback(m_Window, [](GLFWwindow* window) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); WindowCloseEvent event; data.EventCallback(event); }); glfwSetKeyCallback(m_Window, [](GLFWwindow* window, int key, int scancode, int action, int mods) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); switch (action) { case GLFW_PRESS: { KeyPressedEvent event(key, 0); data.EventCallback(event); break; } case GLFW_RELEASE: { KeyReleasedEvent event(key); data.EventCallback(event); break; } case GLFW_REPEAT: { KeyPressedEvent event(key, 1); data.EventCallback(event); break; } } }); glfwSetMouseButtonCallback(m_Window, [](GLFWwindow* window, int button, int action, int mods) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); switch (action) { case GLFW_PRESS: { MouseButtonPressedEvent event(button); data.EventCallback(event); break; } case GLFW_RELEASE: { MouseButtonReleasedEvent event(button); data.EventCallback(event); break; } } }); glfwSetScrollCallback(m_Window, [](GLFWwindow* window, double xOffset, double yOffset) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); MouseScrolledEvent event((float)xOffset, (float)yOffset); data.EventCallback(event); }); glfwSetCursorPosCallback(m_Window, [](GLFWwindow* window, double xPos, double yPos) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); MouseMovedEvent event((float)xPos, (float)yPos); data.EventCallback(event); }); Application Application \uff1a\u6dfb\u52a0\u4e86\u6307\u5411 Window \u7684\u6307\u9488\u4ee5\u53ca\u5bf9 Event \u7684\u5904\u7406\u51fd\u6570\u3002 class HAZEL_API Application { public: Application(); virtual ~Application(); void Run(); void OnEvent(Event& e); private: bool OnWindowClose(WindowCloseEvent& e); std::unique_ptr<Window> m_Window; bool m_Running = true; }; \u4f18\u70b9 \u5e94\u7528\u50a8\u5b58\u7a97\u53e3\u7684\u6307\u9488\uff0c\u7a97\u53e3\u4e0d\u77e5\u9053\u5e94\u7528\u7684\u5b58\u5728\u3002 \u6240\u4ee5\u5e94\u7528\u7406\u5e94\u77e5\u9053\u7a97\u53e3\u7684\u5b58\u5728\uff0c\u4f46\u662f\u7a97\u53e3\u4e0d\u5e94\u8be5\u77e5\u9053\u5e94\u7528\u7684\u5b58\u5728\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u4fe1\u606f\u7684\u4f20\u9012\uff0c\u9700\u4e3a\u7a97\u53e3\u521b\u5efa\u56de\u8c03\u51fd\u6570\u3002 \u8865\u5145\u77e5\u8bc6 #define \u6e38\u620f\u5f15\u64ce\u4e2d\u4e3a\u4e86\u7b80\u5316\u4ee3\u7801\uff0c\u5e38\u5e38\u4f1a\u521b\u5efa\u8bb8\u591a\u5b8f\u5b9a\u4e49\uff0c\u5982\u3002 #define EVENT_CLASS_TYPE(type) \\ static EventType GetStaticType() { return EventType::##type; }\\ const EventType GetEventType() const override { return GetStaticType(); }\\ const char* GetName() const override { return #type; } \u5176\u4e2d # \u662f\u5c06\u5176\u503c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff0c ## \u662f\u76f4\u63a5\u8fdb\u884c\u5b57\u7b26\u7684\u62fc\u63a5\u3002 \u521b\u5efa\u4e00\u4e2a Assert \u7c7b\u578b\u7684\u5b8f\u6765\u5224\u65ad\u6570\u636e\u662f\u5426\u4e3a\u7a7a\u3002 #ifdef HZ_ENABLE_ASSERTS #define HAZEL_ASSERT(x, ...) if(!x) {LOG_ERROR(\"Assertion Failed At: {0}\", __VA_ARGS__);\\ __debugbreak();} #define HAZEL_CORE_ASSERT(x, ...) if(!x) {CORE_LOG_ERROR(\"Assertion Failed At: {0}\", __VA_ARGS__);\\ __debugbreak();} #else #define HAZEL_ASSERT(x, ...) // \u975eDebug\u72b6\u6001\u4e0b\u8fd9\u884c\u4ee3\u7801\u6beb\u65e0\u4f5c\u7528 #define HAZEL_CORE_ASSERT(x, ...) #endif \u5176\u4e2d Variadic Arguments \u8868\u793a\u53ef\u53d8\u7684\u53c2\u6570\uff0c __debugbreak \u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u5728\u8fd0\u884c\u5230\u6b64\u5904\u65f6\u81ea\u52a8\u65ad\u70b9\u3002 std::function Class template std::function is a general-purpose polymorphic function wrapper. Instances of std::function can store, copy, and invoke any Callable target \u2013 functions, lambda expressions, bind expressions, or other function objects, as well as pointers to member functions and pointers to data members. The stored callable object is called the target of std::function. If a std::function contains no target, it is called empty. Invoking the target of an empty std::function results in std::bad_function_call exception being thrown. std::function satisfies the requirements of CopyConstructible and CopyAssignable. std::function \u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u5305\u88c5\u5668\uff0c\u662f\u4e00\u4e2a\u7c7b\u6a21\u677f\uff0c\u53ef\u4ee5\u5bb9\u7eb3\u9664\u4e86\u7c7b\u6210\u5458\u51fd\u6570\u6307\u9488\u4e4b\u5916\u7684\u6240\u6709\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u7528\u7edf\u4e00\u7684\u65b9\u5f0f\u5904\u7406\u51fd\u6570\u3001\u51fd\u6570\u5bf9\u8c61\u3001\u51fd\u6570\u6307\u9488\uff0c\u5e76\u5141\u8bb8\u4fdd\u5b58\u548c\u5ef6\u8fdf\u5b83\u4eec\u7684\u6267\u884c\u3002 std::function \u53ef\u4ee5\u53d6\u4ee3\u51fd\u6570\u6307\u9488\u7684\u4f5c\u7528\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5ef6\u8fdf\u51fd\u6570\u7684\u6267\u884c\uff0c\u7279\u522b\u9002\u5408\u4f5c\u4e3a\u56de\u8c03\u51fd\u6570\u4f7f\u7528\u3002\u5b83\u6bd4\u666e\u901a\u51fd\u6570\u6307\u9488\u66f4\u52a0\u7684\u7075\u6d3b\u548c\u4fbf\u5229\u3002 \u6545\u800c\uff0c std::function \u7684\u4f5c\u7528\u53ef\u4ee5\u5f52\u7ed3\u6210\u3002 std::function \u5bf9 C++ \u4e2d\u5404\u79cd\u53ef\u8c03\u7528\u5b9e\u4f53\uff08\u666e\u901a\u51fd\u6570\u3001 Lambda \u8868\u8fbe\u5f0f\u3001\u51fd\u6570\u6307\u9488\u3001\u4ee5\u53ca\u5176\u5b83\u51fd\u6570\u5bf9\u8c61\u7b49\uff09\u7684\u5c01\u88c5\uff0c\u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u53ef\u8c03\u7528\u7684 std::function \u5bf9\u8c61\uff0c\u7b80\u5316\u8c03\u7528\uff1b std::function \u5bf9\u8c61\u662f\u5bf9 C++ \u4e2d\u73b0\u6709\u7684\u53ef\u8c03\u7528\u5b9e\u4f53\u7684\u4e00\u79cd\u7c7b\u578b\u5b89\u5168\u7684\u5305\u88f9\uff08\u5982\uff1a\u51fd\u6570\u6307\u9488\u8fd9\u7c7b\u53ef\u8c03\u7528\u5b9e\u4f53\uff0c\u662f\u7c7b\u578b\u4e0d\u5b89\u5168\u7684\uff09\u3002 \u8c03\u7528\u65f6\u53ea\u9700\u5c06\u51fd\u6570\u8f6c\u6362\u6210\u7279\u5b9a\u7684\u51fd\u6570\u578b\u5373\u53ef\u4f7f\u7528\u3002 std::function <void()> a = static_cast<fun_ptr_a>(print); std::function <void(int)> b = static_cast<fun_ptr_b>(print); std::bind \u6982\u8ff0 bind \u51fd\u6570\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u901a\u7528\u7684\u51fd\u6570\u9002\u914d\u5668\uff0c\u6240\u8c13\u9002\u914d\u5668\uff0c\u5373\u4f7f\u67d0\u79cd\u4e8b\u7269\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u53e6\u5916\u4e00\u79cd\u4e8b\u7269\u7684\u4e00\u79cd\u673a\u5236\uff0c\u5982\u5bb9\u5668\u9002\u914d\u5668\uff1a stack \uff08\u6808\uff09\u3001 queue \uff08\u961f\u5217\uff09\u3001 priority_queue \uff08\u4f18\u5148\u7ea7\u961f\u5217\uff09\u3002 bind \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u6765\u9002\u914d\u539f\u5bf9\u8c61\u3002 \u51fd\u6570\u539f\u578b template <class Fn, class... Args> /* unspecified */ bind (Fn&& fn, Args&&... args); bind \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u9017\u53f7\u5206\u5272\u7684\u53c2\u6570\u5217\u8868 args \uff0c\u5bf9\u5e94\u7ed9\u5b9a\u51fd\u6570\u5bf9\u8c61 fn \u7684\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u5bf9\u8c61\u3002 \u53c2\u6570\u5217\u8868 args \u4e2d\u3002 \u5982\u679c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u503c\uff0c\u5219\u8c03\u7528\u8fd4\u56de\u7684\u51fd\u6570\u5bf9\u8c61\u5c06\u59cb\u7ec8\u4f7f\u7528\u8be5\u503c\u4f5c\u4e3a\u53c2\u6570\uff1b \u5982\u679c\u662f\u4e00\u4e2a\u5f62\u5982 _n \u7684\u5360\u4f4d\u7b26\uff0c\u5219\u8c03\u7528\u8fd4\u56de\u7684\u51fd\u6570\u5bf9\u8c61\u4f1a\u8f6c\u53d1\u4f20\u9012\u7ed9\u8c03\u7528\u7684\u53c2\u6570(\u8be5\u53c2\u6570\u7684\u987a\u5e8f\u53f7\u7531\u5360\u4f4d\u7b26\u6307\u5b9a)\u3002 \u4f7f\u7528 std::bind \u4e00\u822c\u4e0e std::function \u4e00\u8d77\u4f7f\u7528\uff0c std::bind \u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u76f4\u63a5\u7528 std::function \u50a8\u5b58\u3002 CallBack \u5b9e\u73b0 \u5b9a\u4e49\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff1b \u63d0\u4f9b\u51fd\u6570\u5b9e\u73b0\u7684\u4e00\u65b9\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u5c06\u56de\u8c03\u51fd\u6570\u7684\u51fd\u6570\u6307\u9488\u6ce8\u518c\u7ed9\u8c03\u7528\u8005\uff1b \u5f53\u7279\u5b9a\u7684\u4e8b\u4ef6\u6216\u6761\u4ef6\u53d1\u751f\u7684\u65f6\u5019\uff0c\u8c03\u7528\u8005\u4f7f\u7528\u51fd\u6570\u6307\u9488\u8c03\u7528\u56de\u8c03\u51fd\u6570\u5bf9\u4e8b\u4ef6\u8fdb\u884c\u5904\u7406\u3002 \u4f18\u70b9 \u56e0\u4e3a\u4f7f\u7528\u6b64\u51fd\u6570\u53ef\u4ee5\u628a\u8c03\u7528\u8005\u4e0e\u88ab\u8c03\u7528\u8005\u5206\u5f00\uff0c\u6240\u4ee5\u8c03\u7528\u8005\u4e0d\u5173\u5fc3\u8c01\u662f\u88ab\u8c03\u7528\u8005\u3002\u5b83\u53ea\u9700\u77e5\u9053\u5b58\u5728\u4e00\u4e2a\u5177\u6709\u7279\u5b9a\u539f\u578b\u548c\u9650\u5236\u6761\u4ef6\u7684\u88ab\u8c03\u7528\u51fd\u6570\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u56de\u8c03\u51fd\u6570\u5c31\u662f\u5141\u8bb8\u7528\u6237\u628a\u9700\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u4e00\u4e2a\u51fd\u6570\uff0c\u4ee5\u4fbf\u8be5\u51fd\u6570\u5728\u5904\u7406\u76f8\u4f3c\u4e8b\u4ef6\u7684\u65f6\u5019\u53ef\u4ee5\u7075\u6d3b\u7684\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u3002 virtual \u5728\u6ca1\u6709 virtual \u7684\u60c5\u51b5\u4e0b\uff0c\u4ee5\u57fa\u7c7b\u6307\u9488\u8c03\u7528\u65f6\u7f16\u8bd1\u5668\u5e76\u4e0d\u77e5\u9053\u6bd4\u57fa\u7c7b\u66f4\u591a\u7684\u4e1c\u897f\uff0c\u901a\u5e38\u8c03\u7528\u51fd\u6570\u7684\u57fa\u7c7b\u7248\u672c\uff1b \u5f53\u7528 virtual \u58f0\u660e\u51fd\u6570\u65f6\uff0c\u6bcf\u5f53\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\u6216\u8005\u4ece\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\u6d3e\u751f\u7684\u7c7b\u65f6\uff0c\u7f16\u8bd1\u5668\u5c31\u521b\u5efa\u4e00\u4e2a VTABLE \uff1b \u5982\u679c\u6d3e\u751f\u7c7b\u6ca1\u6709\u5bf9\u57fa\u7c7b\u7684 virtual \u51fd\u6570\u8fdb\u884c\u91cd\u65b0\u5b9a\u4e49\uff0c VTABLE \u4e2d\u5c31\u586b\u5145\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u7684\u5730\u5740\uff1b \u7f16\u8bd1\u5668\u4f1a\u5728\u7c7b\u4e2d\u653e\u7f6e\u4e00\u4e2a VPTR \uff0c VPTR \u6307\u5411\u76f8\u5e94\u7684 VTABLE \uff0c VPTR \u7684\u521d\u59cb\u5316\u5728\u6784\u9020\u51fd\u6570\u4e2d\u5b8c\u6210\u3002 \u6211\u7684\u7406\u89e3\u662f\uff0c\u7236\u7c7b\u7684\u6240\u6709\u865a\u51fd\u6570\u4f1a\u88ab\u6c47\u603b\u6210\u4e00\u5f20\u8868\uff0c\u5b50\u7c7b\u7ee7\u627f\u65f6\u4f1a\u5f00\u8f9f\u4e00\u5757\u5185\u5b58\u653e\u7f6e\u8be5\u8868\u548c\u4e00\u4e2a\u6307\u5411\u8be5\u8868\u7684\u6307\u9488\uff0c\u5982\u679c\u91cd\u8f7d\u4e86\u5c31\u8986\u76d6\u8868\u4e2d\u76f8\u5e94\u7684\u51fd\u6570\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\u4e4b\u6240\u4ee5\u89c4\u5b9a\u7236\u7c7b\u7684\u6790\u6784\u51fd\u6570\u5fc5\u987b\u4e3a\u865a\u51fd\u6570\uff0c\u662f\u4e3a\u4e86\u9632\u6b62 delete \u5b50\u7c7b\u65f6\u6ca1\u6709 delete \u7236\u7c7b\uff0c\u4ece\u800c\u9020\u6210\u5185\u5b58\u6ea2\u51fa\u3002 std::make_unique unique_ptr make_shared VSync \u5782\u76f4\u540c\u6b65\u65e8\u5728\u89e3\u51b3\u753b\u9762\u7684 fps \u4e0e\u663e\u793a\u5668\u7684\u5e27\u7387\u4e0d\u540c\u6b65\u7684\u95ee\u9898\uff0c\u5f53\u4e8c\u8005\u5b58\u5728\u5dee\u8ddd\u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0 Screen Tearing \uff08\u5c4f\u5e55\u6495\u626f\uff09\u7684\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u4e0b\u9762\u7684\u56fe\u793a\u5c55\u793a\u4e86 GPU \u548c\u663e\u793a\u5668\u7ed8\u5236\u5e27\u7387\u4e0d\u540c\u6b65\u5bfc\u81f4\u5c4f\u5e55\u6495\u626f\u7684\u60c5\u51b5\u3002 \u597d\u5904 \u964d\u4f4e GPU \u7684\u5e27\u7387\uff0c\u4f7f\u5176\u8ddf\u663e\u793a\u5668\u7684\u5e27\u7387\u4e00\u6837 \u5bf9\u4e8e\u4e00\u4e9b\u8001\u6e38\u620f\uff0c GPU \u5e27\u7387\u4f1a\u7279\u522b\u9ad8\uff0c\u8fd9\u5f88\u6d88\u8017\u6027\u80fd\uff0c\u800c\u5f00\u542f\u5782\u76f4\u540c\u6b65\u80fd\u540c\u6b65 GPU \u5e27\u7387\u5230\u663e\u793a\u5668\u7684\u5e27\u7387\uff0c\u4ece\u800c\u51cf\u5c11 GPU \u7684\u8ba1\u7b97\u91cf\uff1b \u574f\u5904 \u53ef\u80fd\u4f1a\u611f\u53d7\u5230 Input \u8f93\u5165\uff0c\u6bd4\u5982\u9f20\u6807\u548c\u952e\u76d8\u8f93\u5165\u7684\u5ef6\u8fdf\uff08\u4fd7\u79f0\u4e0d\u8ddf\u624b\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u7684\u533a\u95f4\u8f93\u5165\u952e\u76d8\u4f1a\u5ef6\u8fdf\u5230\u4e0b\u4e00\u5e27\u3002 \u8d44\u6599\u6765\u6e90 #define \u3002 std::function \u3002 std::bind \u3002 CallBack \u3002 virtual \u3002 std::make_unique unique_ptr make_shared \u3002 VSync \u3002","title":"\u4e8b\u4ef6\u7cfb\u7edf"},{"location":"EventSystem/#_1","text":"\u56fe\u3002","title":"\u7ed3\u6784"},{"location":"EventSystem/#event","text":"EventType \u548c EventCategory \uff1a\u5bf9\u5404\u79cd\u4e8b\u4ef6\u8fdb\u884c\u5206\u7c7b\u3002 enum class EventType { None = 0, WindowClose, WindowResize, WindowFocus, WindowLostFocus, WindowMoved, AppTick, AppUpdate, AppRender, KeyPressed, KeyReleased, MouseButtonPressed, MouseButtonReleased, MouseMoved, MouseScrolled }; enum EventCategory { None = 0, EventCategoryApplication = BIT(0), EventCategoryInput = BIT(1), EventCategoryKeyboard = BIT(2), EventCategoryMouse = BIT(3), EventCategoryMouseButton = BIT(4) }; Event \uff1a\u4f5c\u4e3a\u57fa\u7c7b\uff0c\u5f15\u5165\u4e8b\u4ef6\u8c03\u5ea6\uff0c\u8bbe\u7f6e\u5e03\u5c14\u53d8\u91cf\u50a8\u5b58\u8be5\u4e8b\u4ef6\u662f\u5426\u5df2\u88ab\u5904\u7406\u3002 class HAZEL_API Event { friend class EventDispatcher; public: virtual EventType GetEventType() const = 0; virtual const char* GetName() const = 0; virtual int GetCategoryFlags() const = 0; virtual std::string ToString() const { return GetName(); } inline bool IsInCategory(EventCategory category) { return GetCategoryFlags() & category; } protected: bool m_Handled = false; }; \u5c06 m_Handled \u8bbe\u4e3a protected \u578b\uff0c\u662f\u4e3a\u4e86\u4fdd\u8bc1\u5b50\u7c7b\u53ef\u4ee5\u76f4\u63a5\u8bbe\u7f6e\u548c\u8c03\u7528\u8be5\u5c5e\u6027\u3002 \u901a\u8fc7\u5bf9 Event \u7684\u91cd\u8f7d\u548c\u5f02\u5316\uff0c\u5373\u53ef\u5b9e\u73b0\u4e0d\u540c\u7684\u4e8b\u4ef6\u3002 EventDispatcher \uff1a\u7528\u6765\u8bbe\u7f6e\u4e8b\u4ef6\u662f\u5426\u5df2\u88ab\u5904\u7406\u3002 class EventDispatcher { template<typename T> using EventFn = std::function<bool(T&)>; public: EventDispatcher(Event& event) : m_Event(event) { } template<typename T> bool Dispatch(EventFn<T> func) { if (m_Event.GetEventType() == T::GetStaticType()) { m_Event.m_Handled = func(*(T*)&m_Event); return true; } return false; } private: Event& m_Event; };","title":"Event"},{"location":"EventSystem/#window","text":"WindowProps \uff1a\u50a8\u5b58 Window \u7684\u57fa\u7840\u5c5e\u6027\u3002 struct WindowProps { std::string Title; unsigned int Width; unsigned int Height; WindowProps(const std::string& title = \"Hazel Engine\", unsigned int width = 1280, unsigned int height = 720) : Title(title), Width(width), Height(height) { } }; Window \uff1a\u4f5c\u4e3a\u57fa\u7c7b\uff0c\u9884\u8bbe\u4e86\u4e8b\u4ef6\u51fd\u6570\u7684\u6a21\u677f\u4ee5\u53ca\u89c4\u8303\u4e86\u7a97\u53e3\u521b\u5efa\u51fd\u6570\u3002 class HAZEL_API Window { public: using EventCallbackFn = std::function<void(Event&)>; virtual ~Window() {} virtual void OnUpdate() = 0; virtual unsigned int GetWidth() const = 0; virtual unsigned int GetHeight() const = 0; // Window attributes virtual void SetEventCallback(const EventCallbackFn& callback) = 0; virtual void SetVSync(bool enabled) = 0; virtual bool IsVSync() const = 0; static Window* Create(const WindowProps& props = WindowProps()); }; WindowsWindow \uff1a\u91cd\u5199\u5e76\u5b9e\u73b0 Window \u7c7b\uff0c\u589e\u6dfb\u4e86 WindowData \u4ee5\u50a8\u5b58\u4ece\u521b\u5efa\u51fd\u6570\u4f20\u6765\u7684\u6570\u636e\u548c\u5f53\u524d\u7684\u56de\u8c03\u51fd\u6570\u4ee5\u53ca\u5bf9 VSync \u7684\u8bbe\u7f6e\u3002 class WindowsWindow : public Window { public: WindowsWindow(const WindowProps& props); virtual ~WindowsWindow(); void OnUpdate() override; inline unsigned int GetWidth() const override { return m_Data.Width; } inline unsigned int GetHeight() const override { return m_Data.Height; } // Window attributes inline void SetEventCallback(const EventCallbackFn& callback) override { m_Data.EventCallback = callback; } void SetVSync(bool enabled) override; bool IsVSync() const override; private: virtual void Init(const WindowProps& props); virtual void Shutdown(); private: GLFWwindow* m_Window; struct WindowData { std::string Title; unsigned int Width, Height; bool VSync; EventCallbackFn EventCallback; }; WindowData m_Data; }; \u5176\u4e2d GLFW \u4e0b\u7684\u56de\u8c03\u51fd\u6570\u5b9e\u73b0 \u5927\u81f4\u5982\u4e0b\u3002 // Set GLFW callbacks glfwSetWindowSizeCallback(m_Window, [](GLFWwindow* window, int width, int height) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); data.Width = width; data.Height = height; WindowResizeEvent event(width, height); data.EventCallback(event); }); glfwSetWindowCloseCallback(m_Window, [](GLFWwindow* window) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); WindowCloseEvent event; data.EventCallback(event); }); glfwSetKeyCallback(m_Window, [](GLFWwindow* window, int key, int scancode, int action, int mods) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); switch (action) { case GLFW_PRESS: { KeyPressedEvent event(key, 0); data.EventCallback(event); break; } case GLFW_RELEASE: { KeyReleasedEvent event(key); data.EventCallback(event); break; } case GLFW_REPEAT: { KeyPressedEvent event(key, 1); data.EventCallback(event); break; } } }); glfwSetMouseButtonCallback(m_Window, [](GLFWwindow* window, int button, int action, int mods) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); switch (action) { case GLFW_PRESS: { MouseButtonPressedEvent event(button); data.EventCallback(event); break; } case GLFW_RELEASE: { MouseButtonReleasedEvent event(button); data.EventCallback(event); break; } } }); glfwSetScrollCallback(m_Window, [](GLFWwindow* window, double xOffset, double yOffset) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); MouseScrolledEvent event((float)xOffset, (float)yOffset); data.EventCallback(event); }); glfwSetCursorPosCallback(m_Window, [](GLFWwindow* window, double xPos, double yPos) { WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window); MouseMovedEvent event((float)xPos, (float)yPos); data.EventCallback(event); });","title":"Window"},{"location":"EventSystem/#application","text":"Application \uff1a\u6dfb\u52a0\u4e86\u6307\u5411 Window \u7684\u6307\u9488\u4ee5\u53ca\u5bf9 Event \u7684\u5904\u7406\u51fd\u6570\u3002 class HAZEL_API Application { public: Application(); virtual ~Application(); void Run(); void OnEvent(Event& e); private: bool OnWindowClose(WindowCloseEvent& e); std::unique_ptr<Window> m_Window; bool m_Running = true; };","title":"Application"},{"location":"EventSystem/#_2","text":"\u5e94\u7528\u50a8\u5b58\u7a97\u53e3\u7684\u6307\u9488\uff0c\u7a97\u53e3\u4e0d\u77e5\u9053\u5e94\u7528\u7684\u5b58\u5728\u3002 \u6240\u4ee5\u5e94\u7528\u7406\u5e94\u77e5\u9053\u7a97\u53e3\u7684\u5b58\u5728\uff0c\u4f46\u662f\u7a97\u53e3\u4e0d\u5e94\u8be5\u77e5\u9053\u5e94\u7528\u7684\u5b58\u5728\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u4fe1\u606f\u7684\u4f20\u9012\uff0c\u9700\u4e3a\u7a97\u53e3\u521b\u5efa\u56de\u8c03\u51fd\u6570\u3002","title":"\u4f18\u70b9"},{"location":"EventSystem/#_3","text":"","title":"\u8865\u5145\u77e5\u8bc6"},{"location":"EventSystem/#define","text":"\u6e38\u620f\u5f15\u64ce\u4e2d\u4e3a\u4e86\u7b80\u5316\u4ee3\u7801\uff0c\u5e38\u5e38\u4f1a\u521b\u5efa\u8bb8\u591a\u5b8f\u5b9a\u4e49\uff0c\u5982\u3002 #define EVENT_CLASS_TYPE(type) \\ static EventType GetStaticType() { return EventType::##type; }\\ const EventType GetEventType() const override { return GetStaticType(); }\\ const char* GetName() const override { return #type; } \u5176\u4e2d # \u662f\u5c06\u5176\u503c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff0c ## \u662f\u76f4\u63a5\u8fdb\u884c\u5b57\u7b26\u7684\u62fc\u63a5\u3002 \u521b\u5efa\u4e00\u4e2a Assert \u7c7b\u578b\u7684\u5b8f\u6765\u5224\u65ad\u6570\u636e\u662f\u5426\u4e3a\u7a7a\u3002 #ifdef HZ_ENABLE_ASSERTS #define HAZEL_ASSERT(x, ...) if(!x) {LOG_ERROR(\"Assertion Failed At: {0}\", __VA_ARGS__);\\ __debugbreak();} #define HAZEL_CORE_ASSERT(x, ...) if(!x) {CORE_LOG_ERROR(\"Assertion Failed At: {0}\", __VA_ARGS__);\\ __debugbreak();} #else #define HAZEL_ASSERT(x, ...) // \u975eDebug\u72b6\u6001\u4e0b\u8fd9\u884c\u4ee3\u7801\u6beb\u65e0\u4f5c\u7528 #define HAZEL_CORE_ASSERT(x, ...) #endif \u5176\u4e2d Variadic Arguments \u8868\u793a\u53ef\u53d8\u7684\u53c2\u6570\uff0c __debugbreak \u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u5728\u8fd0\u884c\u5230\u6b64\u5904\u65f6\u81ea\u52a8\u65ad\u70b9\u3002","title":"#define"},{"location":"EventSystem/#stdfunction","text":"Class template std::function is a general-purpose polymorphic function wrapper. Instances of std::function can store, copy, and invoke any Callable target \u2013 functions, lambda expressions, bind expressions, or other function objects, as well as pointers to member functions and pointers to data members. The stored callable object is called the target of std::function. If a std::function contains no target, it is called empty. Invoking the target of an empty std::function results in std::bad_function_call exception being thrown. std::function satisfies the requirements of CopyConstructible and CopyAssignable. std::function \u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u5305\u88c5\u5668\uff0c\u662f\u4e00\u4e2a\u7c7b\u6a21\u677f\uff0c\u53ef\u4ee5\u5bb9\u7eb3\u9664\u4e86\u7c7b\u6210\u5458\u51fd\u6570\u6307\u9488\u4e4b\u5916\u7684\u6240\u6709\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u7528\u7edf\u4e00\u7684\u65b9\u5f0f\u5904\u7406\u51fd\u6570\u3001\u51fd\u6570\u5bf9\u8c61\u3001\u51fd\u6570\u6307\u9488\uff0c\u5e76\u5141\u8bb8\u4fdd\u5b58\u548c\u5ef6\u8fdf\u5b83\u4eec\u7684\u6267\u884c\u3002 std::function \u53ef\u4ee5\u53d6\u4ee3\u51fd\u6570\u6307\u9488\u7684\u4f5c\u7528\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5ef6\u8fdf\u51fd\u6570\u7684\u6267\u884c\uff0c\u7279\u522b\u9002\u5408\u4f5c\u4e3a\u56de\u8c03\u51fd\u6570\u4f7f\u7528\u3002\u5b83\u6bd4\u666e\u901a\u51fd\u6570\u6307\u9488\u66f4\u52a0\u7684\u7075\u6d3b\u548c\u4fbf\u5229\u3002 \u6545\u800c\uff0c std::function \u7684\u4f5c\u7528\u53ef\u4ee5\u5f52\u7ed3\u6210\u3002 std::function \u5bf9 C++ \u4e2d\u5404\u79cd\u53ef\u8c03\u7528\u5b9e\u4f53\uff08\u666e\u901a\u51fd\u6570\u3001 Lambda \u8868\u8fbe\u5f0f\u3001\u51fd\u6570\u6307\u9488\u3001\u4ee5\u53ca\u5176\u5b83\u51fd\u6570\u5bf9\u8c61\u7b49\uff09\u7684\u5c01\u88c5\uff0c\u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u53ef\u8c03\u7528\u7684 std::function \u5bf9\u8c61\uff0c\u7b80\u5316\u8c03\u7528\uff1b std::function \u5bf9\u8c61\u662f\u5bf9 C++ \u4e2d\u73b0\u6709\u7684\u53ef\u8c03\u7528\u5b9e\u4f53\u7684\u4e00\u79cd\u7c7b\u578b\u5b89\u5168\u7684\u5305\u88f9\uff08\u5982\uff1a\u51fd\u6570\u6307\u9488\u8fd9\u7c7b\u53ef\u8c03\u7528\u5b9e\u4f53\uff0c\u662f\u7c7b\u578b\u4e0d\u5b89\u5168\u7684\uff09\u3002 \u8c03\u7528\u65f6\u53ea\u9700\u5c06\u51fd\u6570\u8f6c\u6362\u6210\u7279\u5b9a\u7684\u51fd\u6570\u578b\u5373\u53ef\u4f7f\u7528\u3002 std::function <void()> a = static_cast<fun_ptr_a>(print); std::function <void(int)> b = static_cast<fun_ptr_b>(print);","title":"std::function"},{"location":"EventSystem/#stdbind","text":"","title":"std::bind"},{"location":"EventSystem/#_4","text":"bind \u51fd\u6570\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u901a\u7528\u7684\u51fd\u6570\u9002\u914d\u5668\uff0c\u6240\u8c13\u9002\u914d\u5668\uff0c\u5373\u4f7f\u67d0\u79cd\u4e8b\u7269\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u53e6\u5916\u4e00\u79cd\u4e8b\u7269\u7684\u4e00\u79cd\u673a\u5236\uff0c\u5982\u5bb9\u5668\u9002\u914d\u5668\uff1a stack \uff08\u6808\uff09\u3001 queue \uff08\u961f\u5217\uff09\u3001 priority_queue \uff08\u4f18\u5148\u7ea7\u961f\u5217\uff09\u3002 bind \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u6765\u9002\u914d\u539f\u5bf9\u8c61\u3002","title":"\u6982\u8ff0"},{"location":"EventSystem/#_5","text":"template <class Fn, class... Args> /* unspecified */ bind (Fn&& fn, Args&&... args); bind \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u9017\u53f7\u5206\u5272\u7684\u53c2\u6570\u5217\u8868 args \uff0c\u5bf9\u5e94\u7ed9\u5b9a\u51fd\u6570\u5bf9\u8c61 fn \u7684\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u5bf9\u8c61\u3002 \u53c2\u6570\u5217\u8868 args \u4e2d\u3002 \u5982\u679c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u503c\uff0c\u5219\u8c03\u7528\u8fd4\u56de\u7684\u51fd\u6570\u5bf9\u8c61\u5c06\u59cb\u7ec8\u4f7f\u7528\u8be5\u503c\u4f5c\u4e3a\u53c2\u6570\uff1b \u5982\u679c\u662f\u4e00\u4e2a\u5f62\u5982 _n \u7684\u5360\u4f4d\u7b26\uff0c\u5219\u8c03\u7528\u8fd4\u56de\u7684\u51fd\u6570\u5bf9\u8c61\u4f1a\u8f6c\u53d1\u4f20\u9012\u7ed9\u8c03\u7528\u7684\u53c2\u6570(\u8be5\u53c2\u6570\u7684\u987a\u5e8f\u53f7\u7531\u5360\u4f4d\u7b26\u6307\u5b9a)\u3002","title":"\u51fd\u6570\u539f\u578b"},{"location":"EventSystem/#_6","text":"std::bind \u4e00\u822c\u4e0e std::function \u4e00\u8d77\u4f7f\u7528\uff0c std::bind \u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u76f4\u63a5\u7528 std::function \u50a8\u5b58\u3002","title":"\u4f7f\u7528"},{"location":"EventSystem/#callback","text":"","title":"CallBack"},{"location":"EventSystem/#_7","text":"\u5b9a\u4e49\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff1b \u63d0\u4f9b\u51fd\u6570\u5b9e\u73b0\u7684\u4e00\u65b9\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u5c06\u56de\u8c03\u51fd\u6570\u7684\u51fd\u6570\u6307\u9488\u6ce8\u518c\u7ed9\u8c03\u7528\u8005\uff1b \u5f53\u7279\u5b9a\u7684\u4e8b\u4ef6\u6216\u6761\u4ef6\u53d1\u751f\u7684\u65f6\u5019\uff0c\u8c03\u7528\u8005\u4f7f\u7528\u51fd\u6570\u6307\u9488\u8c03\u7528\u56de\u8c03\u51fd\u6570\u5bf9\u4e8b\u4ef6\u8fdb\u884c\u5904\u7406\u3002","title":"\u5b9e\u73b0"},{"location":"EventSystem/#_8","text":"\u56e0\u4e3a\u4f7f\u7528\u6b64\u51fd\u6570\u53ef\u4ee5\u628a\u8c03\u7528\u8005\u4e0e\u88ab\u8c03\u7528\u8005\u5206\u5f00\uff0c\u6240\u4ee5\u8c03\u7528\u8005\u4e0d\u5173\u5fc3\u8c01\u662f\u88ab\u8c03\u7528\u8005\u3002\u5b83\u53ea\u9700\u77e5\u9053\u5b58\u5728\u4e00\u4e2a\u5177\u6709\u7279\u5b9a\u539f\u578b\u548c\u9650\u5236\u6761\u4ef6\u7684\u88ab\u8c03\u7528\u51fd\u6570\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u56de\u8c03\u51fd\u6570\u5c31\u662f\u5141\u8bb8\u7528\u6237\u628a\u9700\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u4e00\u4e2a\u51fd\u6570\uff0c\u4ee5\u4fbf\u8be5\u51fd\u6570\u5728\u5904\u7406\u76f8\u4f3c\u4e8b\u4ef6\u7684\u65f6\u5019\u53ef\u4ee5\u7075\u6d3b\u7684\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u3002","title":"\u4f18\u70b9"},{"location":"EventSystem/#virtual","text":"\u5728\u6ca1\u6709 virtual \u7684\u60c5\u51b5\u4e0b\uff0c\u4ee5\u57fa\u7c7b\u6307\u9488\u8c03\u7528\u65f6\u7f16\u8bd1\u5668\u5e76\u4e0d\u77e5\u9053\u6bd4\u57fa\u7c7b\u66f4\u591a\u7684\u4e1c\u897f\uff0c\u901a\u5e38\u8c03\u7528\u51fd\u6570\u7684\u57fa\u7c7b\u7248\u672c\uff1b \u5f53\u7528 virtual \u58f0\u660e\u51fd\u6570\u65f6\uff0c\u6bcf\u5f53\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\u6216\u8005\u4ece\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\u6d3e\u751f\u7684\u7c7b\u65f6\uff0c\u7f16\u8bd1\u5668\u5c31\u521b\u5efa\u4e00\u4e2a VTABLE \uff1b \u5982\u679c\u6d3e\u751f\u7c7b\u6ca1\u6709\u5bf9\u57fa\u7c7b\u7684 virtual \u51fd\u6570\u8fdb\u884c\u91cd\u65b0\u5b9a\u4e49\uff0c VTABLE \u4e2d\u5c31\u586b\u5145\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u7684\u5730\u5740\uff1b \u7f16\u8bd1\u5668\u4f1a\u5728\u7c7b\u4e2d\u653e\u7f6e\u4e00\u4e2a VPTR \uff0c VPTR \u6307\u5411\u76f8\u5e94\u7684 VTABLE \uff0c VPTR \u7684\u521d\u59cb\u5316\u5728\u6784\u9020\u51fd\u6570\u4e2d\u5b8c\u6210\u3002 \u6211\u7684\u7406\u89e3\u662f\uff0c\u7236\u7c7b\u7684\u6240\u6709\u865a\u51fd\u6570\u4f1a\u88ab\u6c47\u603b\u6210\u4e00\u5f20\u8868\uff0c\u5b50\u7c7b\u7ee7\u627f\u65f6\u4f1a\u5f00\u8f9f\u4e00\u5757\u5185\u5b58\u653e\u7f6e\u8be5\u8868\u548c\u4e00\u4e2a\u6307\u5411\u8be5\u8868\u7684\u6307\u9488\uff0c\u5982\u679c\u91cd\u8f7d\u4e86\u5c31\u8986\u76d6\u8868\u4e2d\u76f8\u5e94\u7684\u51fd\u6570\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\u4e4b\u6240\u4ee5\u89c4\u5b9a\u7236\u7c7b\u7684\u6790\u6784\u51fd\u6570\u5fc5\u987b\u4e3a\u865a\u51fd\u6570\uff0c\u662f\u4e3a\u4e86\u9632\u6b62 delete \u5b50\u7c7b\u65f6\u6ca1\u6709 delete \u7236\u7c7b\uff0c\u4ece\u800c\u9020\u6210\u5185\u5b58\u6ea2\u51fa\u3002","title":"virtual"},{"location":"EventSystem/#stdmake_unique-unique_ptr-make_shared","text":"","title":"std::make_unique unique_ptr make_shared"},{"location":"EventSystem/#vsync","text":"\u5782\u76f4\u540c\u6b65\u65e8\u5728\u89e3\u51b3\u753b\u9762\u7684 fps \u4e0e\u663e\u793a\u5668\u7684\u5e27\u7387\u4e0d\u540c\u6b65\u7684\u95ee\u9898\uff0c\u5f53\u4e8c\u8005\u5b58\u5728\u5dee\u8ddd\u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0 Screen Tearing \uff08\u5c4f\u5e55\u6495\u626f\uff09\u7684\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u4e0b\u9762\u7684\u56fe\u793a\u5c55\u793a\u4e86 GPU \u548c\u663e\u793a\u5668\u7ed8\u5236\u5e27\u7387\u4e0d\u540c\u6b65\u5bfc\u81f4\u5c4f\u5e55\u6495\u626f\u7684\u60c5\u51b5\u3002","title":"VSync"},{"location":"EventSystem/#_9","text":"\u964d\u4f4e GPU \u7684\u5e27\u7387\uff0c\u4f7f\u5176\u8ddf\u663e\u793a\u5668\u7684\u5e27\u7387\u4e00\u6837 \u5bf9\u4e8e\u4e00\u4e9b\u8001\u6e38\u620f\uff0c GPU \u5e27\u7387\u4f1a\u7279\u522b\u9ad8\uff0c\u8fd9\u5f88\u6d88\u8017\u6027\u80fd\uff0c\u800c\u5f00\u542f\u5782\u76f4\u540c\u6b65\u80fd\u540c\u6b65 GPU \u5e27\u7387\u5230\u663e\u793a\u5668\u7684\u5e27\u7387\uff0c\u4ece\u800c\u51cf\u5c11 GPU \u7684\u8ba1\u7b97\u91cf\uff1b","title":"\u597d\u5904"},{"location":"EventSystem/#_10","text":"\u53ef\u80fd\u4f1a\u611f\u53d7\u5230 Input \u8f93\u5165\uff0c\u6bd4\u5982\u9f20\u6807\u548c\u952e\u76d8\u8f93\u5165\u7684\u5ef6\u8fdf\uff08\u4fd7\u79f0\u4e0d\u8ddf\u624b\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u7684\u533a\u95f4\u8f93\u5165\u952e\u76d8\u4f1a\u5ef6\u8fdf\u5230\u4e0b\u4e00\u5e27\u3002","title":"\u574f\u5904"},{"location":"EventSystem/#_11","text":"#define \u3002 std::function \u3002 std::bind \u3002 CallBack \u3002 virtual \u3002 std::make_unique unique_ptr make_shared \u3002 VSync \u3002","title":"\u8d44\u6599\u6765\u6e90"},{"location":"introduce/","text":"\u4ec0\u4e48\u662f\u6e38\u620f\u5f15\u64ce \u7ef4\u57fa\u767e\u79d1 \u6e38\u620f\u5f15\u64ce\u662f\u6307\u4e00\u4e9b\u5df2\u7f16\u5199\u597d\u7684\u53ef\u7f16\u8f91\u7535\u8111\u6e38\u620f\u7cfb\u7edf\u6216\u8005\u4e00\u4e9b\u4ea4\u4e92\u5f0f\u5b9e\u65f6\u56fe\u50cf\u5e94\u7528\u7a0b\u5e8f\u7684\u6838\u5fc3\u7ec4\u4ef6\u3002 \u8fd9\u4e9b\u7cfb\u7edf\u4e3a\u6e38\u620f\u8bbe\u8ba1\u8005\u63d0\u4f9b\u7f16\u5199\u6e38\u620f\u6240\u9700\u7684\u5404\u79cd\u5de5\u5177\uff0c\u76ee\u7684\u5728\u4e8e\u8ba9\u6e38\u620f\u8bbe\u8ba1\u8005\u80fd\u591f\u5feb\u901f\u5730\u505a\u51fa\u6e38\u620f\uff0c\u800c\u4e0d\u7528\u4ece\u96f6\u5f00\u59cb\u3002 \u738b\u5e0c\u8001\u5e08 \u300a\u9ed1\u5ba2\u5e1d\u56fd\u300b\u7684\u6280\u672f\u57fa\u77f3\uff1b \u751f\u4ea7\u521b\u610f\u7684\u5de5\u5177\uff1b \u590d\u6742\u6027\u7cfb\u7edf\u7684\u827a\u672f\u3002 Zong \u4ece\u5ba2\u89c2\u6765\u4e0a\u8bf4\uff0c\u6e38\u620f\u5f15\u64ce\u662f\u4e00\u5806\u6e38\u620f\u5e95\u5c42\u6240\u9700\u7684\u6a21\u5757\u7684\u96c6\u5408\uff0c\u4f46\u662f\u5982\u679c\u4f60\u5c06\u5176\u5f53\u4f5c\u4e00\u4e2a\u590d\u6742\u7684\u673a\u5668\u6216\u8005\u4e16\u754c\uff0c\u90a3\u5b83\u5c31\u662f\u4eba\u7c7b\u827a\u672f\u7684\u96c6\u5927\u6210\u4f5c\u3002 \u5c0a\u91cd\u5b83\uff0c\u6b23\u8d4f\u5b83\uff0c\u7406\u89e3\u5b83\u3002 \u6e38\u620f\u5f15\u64ce\u4f1a\u4e3a\u4f60\u63d0\u4f9b\u4e00\u5957\u5b8c\u6574\u7684\u5f00\u53d1\u5de5\u5177\u94fe\uff0c\u4ee5\u4f9b\u4f60\u5f00\u53d1\u5404\u79cd\u5404\u6837\u7684\u6e38\u620f\uff0c\u751a\u81f3\u662f\u5f71\u89c6\u3002 \u600e\u4e48\u5b66\u4e60\u6e38\u620f\u5f15\u64ce \u6e38\u620f\u5f15\u64ce\u5185\u542b\u4e86\u73b0\u6709\u7684\u5927\u90e8\u5206\u79d1\u5b66\u77e5\u8bc6\uff0c\u90a3\u4e9b\u4e1c\u897f\u9700\u8981\u4f60\u82b1\u51e0\u4e4e\u4e00\u8f88\u5b50\u53bb\u94bb\u7814\u624d\u80fd\u771f\u6b63\u7406\u89e3\u3002 \u6240\u4ee5\u5728\u8fd9\u91cc\uff0c\u6211\u66f4\u591a\u7684\u662f\u4e3a\u4f60\u6784\u5efa\u51fa\u6e38\u620f\u5f15\u64ce\u7684\u7406\u8bba\u6846\u67b6\uff0c\u5269\u4e0b\u7684\u9700\u8981\u4f60\u81ea\u5df1\u4ee5\u540e\u6162\u6162\u586b\u8865\u3002 \u6e38\u620f\u5f15\u64ce\u6846\u67b6 \u4ece\u4e0a\u5f80\u4e0b\u4f9d\u6b21\u662f\u5de5\u5177\u5c42\u3001\u529f\u80fd\u5c42\u3001\u8d44\u6e90\u5c42\u3001\u5e73\u53f0\u5c42\u548c\u6838\u5fc3\u5c42\uff0c\u518d\u52a0\u4e0a\u8d2f\u7a7f\u59cb\u7ec8\u7684\u7b2c\u4e09\u65b9\u5e93\u3002 \u5728\u8fd9\u91cc\u6211\u5c06\u5e73\u53f0\u5c42\u653e\u5728\u6838\u5fc3\u5c42\u4e4b\u4e0a\uff0c\u610f\u5728\u6307\u901a\u8fc7\u62bd\u8c61 API \u5c06\u6838\u5fc3\u5c42\u7684\u4ee3\u7801\u5728\u5e73\u53f0\u5c42\u4e2d\u5b9e\u73b0\uff08 override \uff09\u548c\u5b8c\u5584\u3002 \u5de5\u5177\u5c42 \u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7f16\u8f91\u5668\u5de5\u5177\uff0c\u6bd4\u5982\u84dd\u56fe\u3002 \u529f\u80fd\u5c42 \u4e3b\u8981\u662f\u901a\u8fc7\u5e95\u5c42\u7684\u6838\u5fc3\u6a21\u5757\u5b9e\u73b0\u5f15\u64ce\u5f00\u53d1\u6240\u9700\u7684\u4e3b\u8981\u529f\u80fd\uff0c\u5e76\u6309\u5e8f Tick \u6bcf\u4e00\u4e2a\u529f\u80fd\u6a21\u5757\u3002 \u591a\u7ebf\u7a0b\u95f4\u7684\u8c03\u5ea6\u4e0e\u7ba1\u7406\u4e5f\u5c5e\u4e8e\u8fd9\u4e00\u5c42\u3002 \u8d44\u6e90\u5c42 \u4e3b\u8981\u662f\u8981\u8bb0\u5f55\u8d44\u6e90\u5185\u90e8\u548c\u8d44\u6e90\u95f4\u7684\u5f15\u7528\u5173\u7cfb\u4ee5\u53ca\u7ba1\u7406\u8d44\u4ea7\u7684\u751f\u547d\u5468\u671f\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c Assimp \u5f15\u5165\u6a21\u578b\u65f6\u4f1a\u6784\u5efa\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u5b58\u50a8\u7ed3\u6784\u3002 \u5e73\u53f0\u5c42 \u4e3b\u8981\u662f\u6839\u636e\u4e0d\u540c\u7684\u6e38\u620f\u5e73\u53f0\u4ee5\u53ca\u6e32\u67d3\u63a5\u53e3\u5f02\u5316\u6838\u5fc3\u5c42\u5f15\u51fa\u7684 API \uff08\u91cd\u8f7d\u865a\u51fd\u6570\u4ee5\u5b9e\u73b0\u591a\u6001\uff09\u3002 \u6838\u5fc3\u5c42 \u5185\u542b\u6570\u5b66\u5e93\uff0c\u4e8b\u4ef6\u76d1\u542c\uff0c\u65e5\u5fd7\u7b49\u7b49\u6838\u5fc3\u529f\u80fd\u3002 \u6570\u636e\u7ed3\u6784\u548c\u5185\u5b58\u7ba1\u7406\u4e5f\u5c5e\u4e8e\u8be5\u5c42\uff0c\u901a\u8fc7\u4f18\u5316\u5e95\u5c42\u7684\u6570\u636e\u5b58\u653e\u4ee5\u51cf\u5c11\u5185\u5b58\u7684\u7a7a\u6d1e\u3002 Vitar Engine \u5728 Vitar Engine \u4e2d\uff0c\u6211\u5e76\u6ca1\u6709\u4f9d\u6b64\u5206\u5c42\u4e25\u683c\u89c4\u5b9a\u76ee\u5f55\u7ed3\u6784\uff0c\u4e0d\u8fc7\u4f1a\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u5c06\u5176\u6574\u7406\u6210\u8be5\u7ed3\u6784\u3002 \u4f60\u53ef\u4ee5\u5148\u53c2\u8003 Piccolo Engine \u3002 \u8d44\u6599\u6765\u6e90 Assimp \u5f15\u5165\u6a21\u578b\u4ecb\u7ecd\u3002","title":"\u4ecb\u7ecd"},{"location":"introduce/#_1","text":"","title":"\u4ec0\u4e48\u662f\u6e38\u620f\u5f15\u64ce"},{"location":"introduce/#_2","text":"\u6e38\u620f\u5f15\u64ce\u662f\u6307\u4e00\u4e9b\u5df2\u7f16\u5199\u597d\u7684\u53ef\u7f16\u8f91\u7535\u8111\u6e38\u620f\u7cfb\u7edf\u6216\u8005\u4e00\u4e9b\u4ea4\u4e92\u5f0f\u5b9e\u65f6\u56fe\u50cf\u5e94\u7528\u7a0b\u5e8f\u7684\u6838\u5fc3\u7ec4\u4ef6\u3002 \u8fd9\u4e9b\u7cfb\u7edf\u4e3a\u6e38\u620f\u8bbe\u8ba1\u8005\u63d0\u4f9b\u7f16\u5199\u6e38\u620f\u6240\u9700\u7684\u5404\u79cd\u5de5\u5177\uff0c\u76ee\u7684\u5728\u4e8e\u8ba9\u6e38\u620f\u8bbe\u8ba1\u8005\u80fd\u591f\u5feb\u901f\u5730\u505a\u51fa\u6e38\u620f\uff0c\u800c\u4e0d\u7528\u4ece\u96f6\u5f00\u59cb\u3002","title":"\u7ef4\u57fa\u767e\u79d1"},{"location":"introduce/#_3","text":"\u300a\u9ed1\u5ba2\u5e1d\u56fd\u300b\u7684\u6280\u672f\u57fa\u77f3\uff1b \u751f\u4ea7\u521b\u610f\u7684\u5de5\u5177\uff1b \u590d\u6742\u6027\u7cfb\u7edf\u7684\u827a\u672f\u3002","title":"\u738b\u5e0c\u8001\u5e08"},{"location":"introduce/#zong","text":"\u4ece\u5ba2\u89c2\u6765\u4e0a\u8bf4\uff0c\u6e38\u620f\u5f15\u64ce\u662f\u4e00\u5806\u6e38\u620f\u5e95\u5c42\u6240\u9700\u7684\u6a21\u5757\u7684\u96c6\u5408\uff0c\u4f46\u662f\u5982\u679c\u4f60\u5c06\u5176\u5f53\u4f5c\u4e00\u4e2a\u590d\u6742\u7684\u673a\u5668\u6216\u8005\u4e16\u754c\uff0c\u90a3\u5b83\u5c31\u662f\u4eba\u7c7b\u827a\u672f\u7684\u96c6\u5927\u6210\u4f5c\u3002 \u5c0a\u91cd\u5b83\uff0c\u6b23\u8d4f\u5b83\uff0c\u7406\u89e3\u5b83\u3002 \u6e38\u620f\u5f15\u64ce\u4f1a\u4e3a\u4f60\u63d0\u4f9b\u4e00\u5957\u5b8c\u6574\u7684\u5f00\u53d1\u5de5\u5177\u94fe\uff0c\u4ee5\u4f9b\u4f60\u5f00\u53d1\u5404\u79cd\u5404\u6837\u7684\u6e38\u620f\uff0c\u751a\u81f3\u662f\u5f71\u89c6\u3002","title":"Zong"},{"location":"introduce/#_4","text":"\u6e38\u620f\u5f15\u64ce\u5185\u542b\u4e86\u73b0\u6709\u7684\u5927\u90e8\u5206\u79d1\u5b66\u77e5\u8bc6\uff0c\u90a3\u4e9b\u4e1c\u897f\u9700\u8981\u4f60\u82b1\u51e0\u4e4e\u4e00\u8f88\u5b50\u53bb\u94bb\u7814\u624d\u80fd\u771f\u6b63\u7406\u89e3\u3002 \u6240\u4ee5\u5728\u8fd9\u91cc\uff0c\u6211\u66f4\u591a\u7684\u662f\u4e3a\u4f60\u6784\u5efa\u51fa\u6e38\u620f\u5f15\u64ce\u7684\u7406\u8bba\u6846\u67b6\uff0c\u5269\u4e0b\u7684\u9700\u8981\u4f60\u81ea\u5df1\u4ee5\u540e\u6162\u6162\u586b\u8865\u3002","title":"\u600e\u4e48\u5b66\u4e60\u6e38\u620f\u5f15\u64ce"},{"location":"introduce/#_5","text":"\u4ece\u4e0a\u5f80\u4e0b\u4f9d\u6b21\u662f\u5de5\u5177\u5c42\u3001\u529f\u80fd\u5c42\u3001\u8d44\u6e90\u5c42\u3001\u5e73\u53f0\u5c42\u548c\u6838\u5fc3\u5c42\uff0c\u518d\u52a0\u4e0a\u8d2f\u7a7f\u59cb\u7ec8\u7684\u7b2c\u4e09\u65b9\u5e93\u3002 \u5728\u8fd9\u91cc\u6211\u5c06\u5e73\u53f0\u5c42\u653e\u5728\u6838\u5fc3\u5c42\u4e4b\u4e0a\uff0c\u610f\u5728\u6307\u901a\u8fc7\u62bd\u8c61 API \u5c06\u6838\u5fc3\u5c42\u7684\u4ee3\u7801\u5728\u5e73\u53f0\u5c42\u4e2d\u5b9e\u73b0\uff08 override \uff09\u548c\u5b8c\u5584\u3002","title":"\u6e38\u620f\u5f15\u64ce\u6846\u67b6"},{"location":"introduce/#_6","text":"\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7f16\u8f91\u5668\u5de5\u5177\uff0c\u6bd4\u5982\u84dd\u56fe\u3002","title":"\u5de5\u5177\u5c42"},{"location":"introduce/#_7","text":"\u4e3b\u8981\u662f\u901a\u8fc7\u5e95\u5c42\u7684\u6838\u5fc3\u6a21\u5757\u5b9e\u73b0\u5f15\u64ce\u5f00\u53d1\u6240\u9700\u7684\u4e3b\u8981\u529f\u80fd\uff0c\u5e76\u6309\u5e8f Tick \u6bcf\u4e00\u4e2a\u529f\u80fd\u6a21\u5757\u3002 \u591a\u7ebf\u7a0b\u95f4\u7684\u8c03\u5ea6\u4e0e\u7ba1\u7406\u4e5f\u5c5e\u4e8e\u8fd9\u4e00\u5c42\u3002","title":"\u529f\u80fd\u5c42"},{"location":"introduce/#_8","text":"\u4e3b\u8981\u662f\u8981\u8bb0\u5f55\u8d44\u6e90\u5185\u90e8\u548c\u8d44\u6e90\u95f4\u7684\u5f15\u7528\u5173\u7cfb\u4ee5\u53ca\u7ba1\u7406\u8d44\u4ea7\u7684\u751f\u547d\u5468\u671f\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c Assimp \u5f15\u5165\u6a21\u578b\u65f6\u4f1a\u6784\u5efa\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u5b58\u50a8\u7ed3\u6784\u3002","title":"\u8d44\u6e90\u5c42"},{"location":"introduce/#_9","text":"\u4e3b\u8981\u662f\u6839\u636e\u4e0d\u540c\u7684\u6e38\u620f\u5e73\u53f0\u4ee5\u53ca\u6e32\u67d3\u63a5\u53e3\u5f02\u5316\u6838\u5fc3\u5c42\u5f15\u51fa\u7684 API \uff08\u91cd\u8f7d\u865a\u51fd\u6570\u4ee5\u5b9e\u73b0\u591a\u6001\uff09\u3002","title":"\u5e73\u53f0\u5c42"},{"location":"introduce/#_10","text":"\u5185\u542b\u6570\u5b66\u5e93\uff0c\u4e8b\u4ef6\u76d1\u542c\uff0c\u65e5\u5fd7\u7b49\u7b49\u6838\u5fc3\u529f\u80fd\u3002 \u6570\u636e\u7ed3\u6784\u548c\u5185\u5b58\u7ba1\u7406\u4e5f\u5c5e\u4e8e\u8be5\u5c42\uff0c\u901a\u8fc7\u4f18\u5316\u5e95\u5c42\u7684\u6570\u636e\u5b58\u653e\u4ee5\u51cf\u5c11\u5185\u5b58\u7684\u7a7a\u6d1e\u3002","title":"\u6838\u5fc3\u5c42"},{"location":"introduce/#vitar-engine","text":"\u5728 Vitar Engine \u4e2d\uff0c\u6211\u5e76\u6ca1\u6709\u4f9d\u6b64\u5206\u5c42\u4e25\u683c\u89c4\u5b9a\u76ee\u5f55\u7ed3\u6784\uff0c\u4e0d\u8fc7\u4f1a\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u5c06\u5176\u6574\u7406\u6210\u8be5\u7ed3\u6784\u3002 \u4f60\u53ef\u4ee5\u5148\u53c2\u8003 Piccolo Engine \u3002","title":"Vitar Engine"},{"location":"introduce/#_11","text":"Assimp \u5f15\u5165\u6a21\u578b\u4ecb\u7ecd\u3002","title":"\u8d44\u6599\u6765\u6e90"},{"location":"Render/","text":"","title":"Index"}]}